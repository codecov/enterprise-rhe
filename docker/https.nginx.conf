user root;
worker_processes 1;
pid /run/nginx.pid;
daemon off;

events {
    use epoll;
    accept_mutex on;
    worker_connections 1024;
}

http {
    gzip on;
    gzip_comp_level 2;
    gzip_min_length 512;

    upstream frontends{
        # value replaced during startup based on number of
        # processes specified
        __FRONTENDS__
    }

    server_tokens off;

    access_log /dev/stdout;
    error_log /dev/stdout;

    include /config/mime.types;
    default_type application/octet-stream;
    sendfile on;

    # http://wiki.nginx.org/HttpProxyModule#proxy_next_upstream
    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error http_502;

    proxy_read_timeout 200;
    tcp_nopush on;
    tcp_nodelay on;

    client_body_timeout 12;
    client_header_timeout 12;

    keepalive_timeout 30;

    server {
       listen         80;
       return         301 https://$host$request_uri;
    }

    server {
        listen                     443;
        keepalive_timeout          5;
        client_max_body_size       500M;
        ssl                        on;
        ssl_certificate            /config/codecov.crt;
        ssl_certificate_key        /config/codecov.key;
        ssl_session_cache          shared:SSL:10m;
        ssl_session_timeout        10m;
        ssl_protocols              TLSv1.2;
        ssl_prefer_server_ciphers  on;
        ssl_ciphers                ECDHE-RSA-AES256-SHA384:AES256-SHA256:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM:!3DES;

        location / {
            proxy_pass_header Server;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://frontends;
        }
    }
}
